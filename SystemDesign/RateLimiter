REquirement
   build a rate liniter that stps maliciious users from submitting roo many requests to our services while inroducing minmal latency
  Support  a variety of different rate limitng techniques
capacity estimates
  1 billion users
  20 services to rate limit
  user id = 8 bytes, integer to keep track of count = 4 bytes
  1 billion * 20 * (8+4) = 240 GB

what to rate limit on
  userid
    ++easy to trak, bad users will be blocked
    -- users can create many accounts , not all services need authentication

  ip address
      ++ easy to track, no need to be signed on , precents multiple accounts
      -- ggod actors on same network will be throttled

  Hybrid appoach


Rate limiting interace
we will be able to support different umplememntation of the rate limitedr interface

  boolean ratelimit(long userid, string ipaddress, string servicename, date request+time)
  returns true if rewuest should be rate limited

where does the rate liiiter go

note: the amount of data that we need to store is too bif to put on lur load balancer
option1 - perform rate limiting locally on each service
option 2 dedicated distributed rate limiter

local rate 
  pros 
   - no extra nq calls reqd
   - fewer comp to manage
  cons
   - if we get spammed can yse up server bandwidth
   - our application and ratelimiter are tightly coupled

Dedicated DIstributed later
   pros
      - shields app servers from large bursts of network traffic
      - scales up or down independently
   cons
      - introduces extra networking call to api req
      - 

Ratelimiting caching
   idea - write back cache on the load balancer once user reaches certain threshold

Rate limiting DB choice
-> no time to access disk so we need memcache or redis
   can take advantsage of existing data structures
   replication also fairly easy to setup

Replication choice
- can we get away with leaderless or multileaeder replication
- could increase weite throughput , oower write load on each system
- have to wait for anti entroppy for counts to synchronize(could use a crdt)

Single leader replication
- counts of requests on master are accurate , can do all reads on master
- if we hae enough shards should be able to have rreasonable . R?W thorughput
---------------------

fixed window rate limiting
- eg - w requests resetting every minute

slidingwindow rate limiting
   - linkedlist with the start time and keep adding the subsequent requests if within the minute

Concurrency considerations
- do we need to perform locking
yes we do

    
